package pagination

import (
	"strconv"
	"github.com/folklinoff/course_paper_frontend/views/params"
	"github.com/folklinoff/course_paper_frontend/tools"
)

templ Pagination(coursePapersCount int, displayParams *params.PageDisplayParams, link func(int) templ.Component) {
	<nav aria-label="Page navigation" class="w-full max-w-1xl flex align-middle">
		<ul class="inline-flex -space-x-px text-sm">
			<li>
				<a href="#" class="flex items-center justify-center px-3 h-8 ms-0 leading-tight text-gray-500 bg-white border border-e-0 border-gray-300 rounded-s-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
					<span class="sr-only">Previous</span>
					<svg class="w-2.5 h-2.5 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
						<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1 1 5l4 4"></path>
					</svg>
				</a>
			</li>
			for i := 1; i <= getPagesNumber(coursePapersCount, displayParams.Limit); i++ {
				@link(i)
			}
			<li>
				<a href="#" class="flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 rounded-e-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
					<span class="sr-only">Next</span>
					<svg class="w-2.5 h-2.5 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
						<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"></path>
					</svg>
				</a>
			</li>
		</ul>
	</nav>
}

templ PageLinkTemplate(currentPage int, pageNumber int, path string, target string) {
	<li>
		if currentPage == pageNumber {
			<button
				aria-current="page"
				class="flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 rounded-e-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
			>{ strconv.FormatInt(int64(pageNumber), 10) }</button>
		} else {
			<button
				hx-get={ path }
				hx-vals={ params.MultipleItemsParams(nil, tools.T(strconv.Itoa(pageNumber))) }
				hx-ext="json-enc"
				hx-target={ target }
				class="flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 rounded-e-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
			>{ strconv.FormatInt(int64(pageNumber), 10) }</button>
		}
	</li>
}

templ DropDownMenu() {
	<div class="relative inline-block text-left group">
		<button
			id="hs-dropdown-hover-event"
			type="button"
			class="py-3 px-4 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-gray-200 bg-white text-gray-800 shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none"
		>
			Display per page
			<svg class="group-hover:rotate-180 size-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m6 9 6 6 6-6"></path></svg>
		</button>
		<ul
			class="dropdown-menu group-hover:block hidden absolute text-gray-700 pt-1 shadow-md w-full opacity-100"
		>
			{ children... }
		</ul>
	</div>
}

func getPagesNumber(coursePapersCount int, itemsPerPage int) int {
	pagesNumber := 1
	if coursePapersCount != 0 {
		pagesNumber = (coursePapersCount-1)/itemsPerPage + 1
	}
	return pagesNumber
}

func NewPageLinkComponent(currentPage int, path string, target string) func(int) templ.Component {
	return func(pageNumber int) templ.Component {
		return PageLinkTemplate(currentPage, pageNumber, path, target)
	}
}
